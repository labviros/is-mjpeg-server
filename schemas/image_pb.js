/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.is.vision.BoundingPoly', null, global);
goog.exportSymbol('proto.is.vision.ColorSpace', null, global);
goog.exportSymbol('proto.is.vision.ColorSpaces', null, global);
goog.exportSymbol('proto.is.vision.Image', null, global);
goog.exportSymbol('proto.is.vision.ImageAnnotation', null, global);
goog.exportSymbol('proto.is.vision.ImageAnnotations', null, global);
goog.exportSymbol('proto.is.vision.ImageFormat', null, global);
goog.exportSymbol('proto.is.vision.ImageFormats', null, global);
goog.exportSymbol('proto.is.vision.ImageSettings', null, global);
goog.exportSymbol('proto.is.vision.Resolution', null, global);
goog.exportSymbol('proto.is.vision.Vertex', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.is.vision.Image.oneofGroups_);
};
goog.inherits(proto.is.vision.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.Image.displayName = 'proto.is.vision.Image';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.is.vision.Image.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.is.vision.Image.ContentCase = {
  CONTENT_NOT_SET: 0,
  DATA: 1,
  URI: 2
};

/**
 * @return {proto.is.vision.Image.ContentCase}
 */
proto.is.vision.Image.prototype.getContentCase = function() {
  return /** @type {proto.is.vision.Image.ContentCase} */(jspb.Message.computeOneofCase(this, proto.is.vision.Image.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    uri: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.Image}
 */
proto.is.vision.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.Image;
  return proto.is.vision.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.Image}
 */
proto.is.vision.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.is.vision.Image.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.is.vision.Image.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.is.vision.Image.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.is.vision.Image.prototype.setData = function(value) {
  jspb.Message.setOneofField(this, 1, proto.is.vision.Image.oneofGroups_[0], value);
};


proto.is.vision.Image.prototype.clearData = function() {
  jspb.Message.setOneofField(this, 1, proto.is.vision.Image.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.Image.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.is.vision.Image.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.is.vision.Image.prototype.setUri = function(value) {
  jspb.Message.setOneofField(this, 2, proto.is.vision.Image.oneofGroups_[0], value);
};


proto.is.vision.Image.prototype.clearUri = function() {
  jspb.Message.setOneofField(this, 2, proto.is.vision.Image.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.Image.prototype.hasUri = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.ImageFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.ImageFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.ImageFormat.displayName = 'proto.is.vision.ImageFormat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.ImageFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.ImageFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.ImageFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getFieldWithDefault(msg, 1, 0),
    compression: (f = msg.getCompression()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.ImageFormat}
 */
proto.is.vision.ImageFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.ImageFormat;
  return proto.is.vision.ImageFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.ImageFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.ImageFormat}
 */
proto.is.vision.ImageFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.is.vision.ImageFormats} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setCompression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.ImageFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.ImageFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.ImageFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCompression();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageFormats format = 1;
 * @return {!proto.is.vision.ImageFormats}
 */
proto.is.vision.ImageFormat.prototype.getFormat = function() {
  return /** @type {!proto.is.vision.ImageFormats} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.is.vision.ImageFormats} value */
proto.is.vision.ImageFormat.prototype.setFormat = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.FloatValue compression = 2;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.is.vision.ImageFormat.prototype.getCompression = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 2));
};


/** @param {?proto.google.protobuf.FloatValue|undefined} value */
proto.is.vision.ImageFormat.prototype.setCompression = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.vision.ImageFormat.prototype.clearCompression = function() {
  this.setCompression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.ImageFormat.prototype.hasCompression = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.Vertex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.Vertex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.Vertex.displayName = 'proto.is.vision.Vertex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.Vertex.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.Vertex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.Vertex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.Vertex.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.Vertex}
 */
proto.is.vision.Vertex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.Vertex;
  return proto.is.vision.Vertex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.Vertex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.Vertex}
 */
proto.is.vision.Vertex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.Vertex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.Vertex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.Vertex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.Vertex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.is.vision.Vertex.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.is.vision.Vertex.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.is.vision.Vertex.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.is.vision.Vertex.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.BoundingPoly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.vision.BoundingPoly.repeatedFields_, null);
};
goog.inherits(proto.is.vision.BoundingPoly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.BoundingPoly.displayName = 'proto.is.vision.BoundingPoly';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.vision.BoundingPoly.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.BoundingPoly.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.BoundingPoly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.BoundingPoly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.BoundingPoly.toObject = function(includeInstance, msg) {
  var f, obj = {
    verticesList: jspb.Message.toObjectList(msg.getVerticesList(),
    proto.is.vision.Vertex.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.BoundingPoly}
 */
proto.is.vision.BoundingPoly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.BoundingPoly;
  return proto.is.vision.BoundingPoly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.BoundingPoly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.BoundingPoly}
 */
proto.is.vision.BoundingPoly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.vision.Vertex;
      reader.readMessage(value,proto.is.vision.Vertex.deserializeBinaryFromReader);
      msg.addVertices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.BoundingPoly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.BoundingPoly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.BoundingPoly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.BoundingPoly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerticesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.is.vision.Vertex.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Vertex vertices = 1;
 * @return {!Array.<!proto.is.vision.Vertex>}
 */
proto.is.vision.BoundingPoly.prototype.getVerticesList = function() {
  return /** @type{!Array.<!proto.is.vision.Vertex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.is.vision.Vertex, 1));
};


/** @param {!Array.<!proto.is.vision.Vertex>} value */
proto.is.vision.BoundingPoly.prototype.setVerticesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.is.vision.Vertex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.vision.Vertex}
 */
proto.is.vision.BoundingPoly.prototype.addVertices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.is.vision.Vertex, opt_index);
};


proto.is.vision.BoundingPoly.prototype.clearVerticesList = function() {
  this.setVerticesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.Resolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.Resolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.Resolution.displayName = 'proto.is.vision.Resolution';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.Resolution.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.Resolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.Resolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.Resolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.Resolution}
 */
proto.is.vision.Resolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.Resolution;
  return proto.is.vision.Resolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.Resolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.Resolution}
 */
proto.is.vision.Resolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.Resolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.Resolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.Resolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.Resolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 height = 1;
 * @return {number}
 */
proto.is.vision.Resolution.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.is.vision.Resolution.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 width = 2;
 * @return {number}
 */
proto.is.vision.Resolution.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.is.vision.Resolution.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.ColorSpace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.ColorSpace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.ColorSpace.displayName = 'proto.is.vision.ColorSpace';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.ColorSpace.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.ColorSpace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.ColorSpace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ColorSpace.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.ColorSpace}
 */
proto.is.vision.ColorSpace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.ColorSpace;
  return proto.is.vision.ColorSpace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.ColorSpace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.ColorSpace}
 */
proto.is.vision.ColorSpace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.is.vision.ColorSpaces} */ (reader.readEnum());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.ColorSpace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.ColorSpace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.ColorSpace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ColorSpace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ColorSpaces value = 1;
 * @return {!proto.is.vision.ColorSpaces}
 */
proto.is.vision.ColorSpace.prototype.getValue = function() {
  return /** @type {!proto.is.vision.ColorSpaces} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.is.vision.ColorSpaces} value */
proto.is.vision.ColorSpace.prototype.setValue = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.ImageSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.ImageSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.ImageSettings.displayName = 'proto.is.vision.ImageSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.ImageSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.ImageSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.ImageSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: (f = msg.getResolution()) && proto.is.vision.Resolution.toObject(includeInstance, f),
    format: (f = msg.getFormat()) && proto.is.vision.ImageFormat.toObject(includeInstance, f),
    colorSpace: (f = msg.getColorSpace()) && proto.is.vision.ColorSpace.toObject(includeInstance, f),
    region: (f = msg.getRegion()) && proto.is.vision.BoundingPoly.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.ImageSettings}
 */
proto.is.vision.ImageSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.ImageSettings;
  return proto.is.vision.ImageSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.ImageSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.ImageSettings}
 */
proto.is.vision.ImageSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.vision.Resolution;
      reader.readMessage(value,proto.is.vision.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 2:
      var value = new proto.is.vision.ImageFormat;
      reader.readMessage(value,proto.is.vision.ImageFormat.deserializeBinaryFromReader);
      msg.setFormat(value);
      break;
    case 3:
      var value = new proto.is.vision.ColorSpace;
      reader.readMessage(value,proto.is.vision.ColorSpace.deserializeBinaryFromReader);
      msg.setColorSpace(value);
      break;
    case 4:
      var value = new proto.is.vision.BoundingPoly;
      reader.readMessage(value,proto.is.vision.BoundingPoly.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.ImageSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.ImageSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.ImageSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.is.vision.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.is.vision.ImageFormat.serializeBinaryToWriter
    );
  }
  f = message.getColorSpace();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.is.vision.ColorSpace.serializeBinaryToWriter
    );
  }
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.is.vision.BoundingPoly.serializeBinaryToWriter
    );
  }
};


/**
 * optional Resolution resolution = 1;
 * @return {?proto.is.vision.Resolution}
 */
proto.is.vision.ImageSettings.prototype.getResolution = function() {
  return /** @type{?proto.is.vision.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.Resolution, 1));
};


/** @param {?proto.is.vision.Resolution|undefined} value */
proto.is.vision.ImageSettings.prototype.setResolution = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.vision.ImageSettings.prototype.clearResolution = function() {
  this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.ImageSettings.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageFormat format = 2;
 * @return {?proto.is.vision.ImageFormat}
 */
proto.is.vision.ImageSettings.prototype.getFormat = function() {
  return /** @type{?proto.is.vision.ImageFormat} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.ImageFormat, 2));
};


/** @param {?proto.is.vision.ImageFormat|undefined} value */
proto.is.vision.ImageSettings.prototype.setFormat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.vision.ImageSettings.prototype.clearFormat = function() {
  this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.ImageSettings.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ColorSpace color_space = 3;
 * @return {?proto.is.vision.ColorSpace}
 */
proto.is.vision.ImageSettings.prototype.getColorSpace = function() {
  return /** @type{?proto.is.vision.ColorSpace} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.ColorSpace, 3));
};


/** @param {?proto.is.vision.ColorSpace|undefined} value */
proto.is.vision.ImageSettings.prototype.setColorSpace = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.is.vision.ImageSettings.prototype.clearColorSpace = function() {
  this.setColorSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.ImageSettings.prototype.hasColorSpace = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BoundingPoly region = 4;
 * @return {?proto.is.vision.BoundingPoly}
 */
proto.is.vision.ImageSettings.prototype.getRegion = function() {
  return /** @type{?proto.is.vision.BoundingPoly} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.BoundingPoly, 4));
};


/** @param {?proto.is.vision.BoundingPoly|undefined} value */
proto.is.vision.ImageSettings.prototype.setRegion = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.is.vision.ImageSettings.prototype.clearRegion = function() {
  this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.ImageSettings.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.ImageAnnotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.ImageAnnotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.ImageAnnotation.displayName = 'proto.is.vision.ImageAnnotation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.ImageAnnotation.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.ImageAnnotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.ImageAnnotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageAnnotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    score: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    region: (f = msg.getRegion()) && proto.is.vision.BoundingPoly.toObject(includeInstance, f),
    pose: (f = msg.getPose()) && common_pb.Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.ImageAnnotation}
 */
proto.is.vision.ImageAnnotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.ImageAnnotation;
  return proto.is.vision.ImageAnnotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.ImageAnnotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.ImageAnnotation}
 */
proto.is.vision.ImageAnnotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 3:
      var value = new proto.is.vision.BoundingPoly;
      reader.readMessage(value,proto.is.vision.BoundingPoly.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    case 4:
      var value = new common_pb.Pose;
      reader.readMessage(value,common_pb.Pose.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.ImageAnnotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.ImageAnnotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.ImageAnnotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageAnnotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.is.vision.BoundingPoly.serializeBinaryToWriter
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.is.vision.ImageAnnotation.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.is.vision.ImageAnnotation.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float score = 2;
 * @return {number}
 */
proto.is.vision.ImageAnnotation.prototype.getScore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.is.vision.ImageAnnotation.prototype.setScore = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional BoundingPoly region = 3;
 * @return {?proto.is.vision.BoundingPoly}
 */
proto.is.vision.ImageAnnotation.prototype.getRegion = function() {
  return /** @type{?proto.is.vision.BoundingPoly} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.BoundingPoly, 3));
};


/** @param {?proto.is.vision.BoundingPoly|undefined} value */
proto.is.vision.ImageAnnotation.prototype.setRegion = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.is.vision.ImageAnnotation.prototype.clearRegion = function() {
  this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.ImageAnnotation.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional is.common.Pose pose = 4;
 * @return {?proto.is.common.Pose}
 */
proto.is.vision.ImageAnnotation.prototype.getPose = function() {
  return /** @type{?proto.is.common.Pose} */ (
    jspb.Message.getWrapperField(this, common_pb.Pose, 4));
};


/** @param {?proto.is.common.Pose|undefined} value */
proto.is.vision.ImageAnnotation.prototype.setPose = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.is.vision.ImageAnnotation.prototype.clearPose = function() {
  this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.ImageAnnotation.prototype.hasPose = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.ImageAnnotations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.vision.ImageAnnotations.repeatedFields_, null);
};
goog.inherits(proto.is.vision.ImageAnnotations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.ImageAnnotations.displayName = 'proto.is.vision.ImageAnnotations';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.vision.ImageAnnotations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.ImageAnnotations.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.ImageAnnotations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.ImageAnnotations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageAnnotations.toObject = function(includeInstance, msg) {
  var f, obj = {
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    proto.is.vision.ImageAnnotation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.ImageAnnotations}
 */
proto.is.vision.ImageAnnotations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.ImageAnnotations;
  return proto.is.vision.ImageAnnotations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.ImageAnnotations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.ImageAnnotations}
 */
proto.is.vision.ImageAnnotations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.vision.ImageAnnotation;
      reader.readMessage(value,proto.is.vision.ImageAnnotation.deserializeBinaryFromReader);
      msg.addAnnotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.ImageAnnotations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.ImageAnnotations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.ImageAnnotations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.ImageAnnotations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.is.vision.ImageAnnotation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ImageAnnotation annotations = 1;
 * @return {!Array.<!proto.is.vision.ImageAnnotation>}
 */
proto.is.vision.ImageAnnotations.prototype.getAnnotationsList = function() {
  return /** @type{!Array.<!proto.is.vision.ImageAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.is.vision.ImageAnnotation, 1));
};


/** @param {!Array.<!proto.is.vision.ImageAnnotation>} value */
proto.is.vision.ImageAnnotations.prototype.setAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.is.vision.ImageAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.vision.ImageAnnotation}
 */
proto.is.vision.ImageAnnotations.prototype.addAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.is.vision.ImageAnnotation, opt_index);
};


proto.is.vision.ImageAnnotations.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};


/**
 * @enum {number}
 */
proto.is.vision.ImageFormats = {
  PNG: 0,
  JPEG: 1,
  WEBP: 2
};

/**
 * @enum {number}
 */
proto.is.vision.ColorSpaces = {
  RGB: 0,
  GRAY: 1,
  YCBCR: 2,
  HSV: 3
};

goog.object.extend(exports, proto.is.vision);
