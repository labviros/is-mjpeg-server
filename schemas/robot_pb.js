/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.is.robot.FinalPoseTask', null, global);
goog.exportSymbol('proto.is.robot.PathTask', null, global);
goog.exportSymbol('proto.is.robot.RobotConfig', null, global);
goog.exportSymbol('proto.is.robot.RobotControllerProgress', null, global);
goog.exportSymbol('proto.is.robot.RobotTask', null, global);
goog.exportSymbol('proto.is.robot.TrajectoryTask', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.robot.RobotConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.robot.RobotConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.robot.RobotConfig.displayName = 'proto.is.robot.RobotConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.robot.RobotConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.is.robot.RobotConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.robot.RobotConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.RobotConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    speed: (f = msg.getSpeed()) && common_pb.Speed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.robot.RobotConfig}
 */
proto.is.robot.RobotConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.robot.RobotConfig;
  return proto.is.robot.RobotConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.robot.RobotConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.robot.RobotConfig}
 */
proto.is.robot.RobotConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Speed;
      reader.readMessage(value,common_pb.Speed.deserializeBinaryFromReader);
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.robot.RobotConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.robot.RobotConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.robot.RobotConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.RobotConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeed();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Speed.serializeBinaryToWriter
    );
  }
};


/**
 * optional is.common.Speed speed = 1;
 * @return {?proto.is.common.Speed}
 */
proto.is.robot.RobotConfig.prototype.getSpeed = function() {
  return /** @type{?proto.is.common.Speed} */ (
    jspb.Message.getWrapperField(this, common_pb.Speed, 1));
};


/** @param {?proto.is.common.Speed|undefined} value */
proto.is.robot.RobotConfig.prototype.setSpeed = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.robot.RobotConfig.prototype.clearSpeed = function() {
  this.setSpeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotConfig.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.robot.FinalPoseTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.robot.FinalPoseTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.robot.FinalPoseTask.displayName = 'proto.is.robot.FinalPoseTask';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.robot.FinalPoseTask.prototype.toObject = function(opt_includeInstance) {
  return proto.is.robot.FinalPoseTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.robot.FinalPoseTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.FinalPoseTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    goal: (f = msg.getGoal()) && common_pb.Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.robot.FinalPoseTask}
 */
proto.is.robot.FinalPoseTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.robot.FinalPoseTask;
  return proto.is.robot.FinalPoseTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.robot.FinalPoseTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.robot.FinalPoseTask}
 */
proto.is.robot.FinalPoseTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Pose;
      reader.readMessage(value,common_pb.Pose.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.robot.FinalPoseTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.robot.FinalPoseTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.robot.FinalPoseTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.FinalPoseTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional is.common.Pose goal = 1;
 * @return {?proto.is.common.Pose}
 */
proto.is.robot.FinalPoseTask.prototype.getGoal = function() {
  return /** @type{?proto.is.common.Pose} */ (
    jspb.Message.getWrapperField(this, common_pb.Pose, 1));
};


/** @param {?proto.is.common.Pose|undefined} value */
proto.is.robot.FinalPoseTask.prototype.setGoal = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.robot.FinalPoseTask.prototype.clearGoal = function() {
  this.setGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.FinalPoseTask.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.robot.PathTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.robot.PathTask.repeatedFields_, null);
};
goog.inherits(proto.is.robot.PathTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.robot.PathTask.displayName = 'proto.is.robot.PathTask';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.robot.PathTask.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.robot.PathTask.prototype.toObject = function(opt_includeInstance) {
  return proto.is.robot.PathTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.robot.PathTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.PathTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    common_pb.Position.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.robot.PathTask}
 */
proto.is.robot.PathTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.robot.PathTask;
  return proto.is.robot.PathTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.robot.PathTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.robot.PathTask}
 */
proto.is.robot.PathTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Position;
      reader.readMessage(value,common_pb.Position.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.robot.PathTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.robot.PathTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.robot.PathTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.PathTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Position.serializeBinaryToWriter
    );
  }
};


/**
 * repeated is.common.Position positions = 1;
 * @return {!Array.<!proto.is.common.Position>}
 */
proto.is.robot.PathTask.prototype.getPositionsList = function() {
  return /** @type{!Array.<!proto.is.common.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Position, 1));
};


/** @param {!Array.<!proto.is.common.Position>} value */
proto.is.robot.PathTask.prototype.setPositionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.is.common.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.common.Position}
 */
proto.is.robot.PathTask.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.is.common.Position, opt_index);
};


proto.is.robot.PathTask.prototype.clearPositionsList = function() {
  this.setPositionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.robot.TrajectoryTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.robot.TrajectoryTask.repeatedFields_, null);
};
goog.inherits(proto.is.robot.TrajectoryTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.robot.TrajectoryTask.displayName = 'proto.is.robot.TrajectoryTask';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.robot.TrajectoryTask.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.robot.TrajectoryTask.prototype.toObject = function(opt_includeInstance) {
  return proto.is.robot.TrajectoryTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.robot.TrajectoryTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.TrajectoryTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    common_pb.Position.toObject, includeInstance),
    speedsList: jspb.Message.toObjectList(msg.getSpeedsList(),
    common_pb.Speed.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.robot.TrajectoryTask}
 */
proto.is.robot.TrajectoryTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.robot.TrajectoryTask;
  return proto.is.robot.TrajectoryTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.robot.TrajectoryTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.robot.TrajectoryTask}
 */
proto.is.robot.TrajectoryTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Position;
      reader.readMessage(value,common_pb.Position.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    case 2:
      var value = new common_pb.Speed;
      reader.readMessage(value,common_pb.Speed.deserializeBinaryFromReader);
      msg.addSpeeds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.robot.TrajectoryTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.robot.TrajectoryTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.robot.TrajectoryTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.TrajectoryTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Position.serializeBinaryToWriter
    );
  }
  f = message.getSpeedsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.Speed.serializeBinaryToWriter
    );
  }
};


/**
 * repeated is.common.Position positions = 1;
 * @return {!Array.<!proto.is.common.Position>}
 */
proto.is.robot.TrajectoryTask.prototype.getPositionsList = function() {
  return /** @type{!Array.<!proto.is.common.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Position, 1));
};


/** @param {!Array.<!proto.is.common.Position>} value */
proto.is.robot.TrajectoryTask.prototype.setPositionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.is.common.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.common.Position}
 */
proto.is.robot.TrajectoryTask.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.is.common.Position, opt_index);
};


proto.is.robot.TrajectoryTask.prototype.clearPositionsList = function() {
  this.setPositionsList([]);
};


/**
 * repeated is.common.Speed speeds = 2;
 * @return {!Array.<!proto.is.common.Speed>}
 */
proto.is.robot.TrajectoryTask.prototype.getSpeedsList = function() {
  return /** @type{!Array.<!proto.is.common.Speed>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Speed, 2));
};


/** @param {!Array.<!proto.is.common.Speed>} value */
proto.is.robot.TrajectoryTask.prototype.setSpeedsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.is.common.Speed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.common.Speed}
 */
proto.is.robot.TrajectoryTask.prototype.addSpeeds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.is.common.Speed, opt_index);
};


proto.is.robot.TrajectoryTask.prototype.clearSpeedsList = function() {
  this.setSpeedsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.robot.RobotTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.is.robot.RobotTask.oneofGroups_);
};
goog.inherits(proto.is.robot.RobotTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.robot.RobotTask.displayName = 'proto.is.robot.RobotTask';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.is.robot.RobotTask.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.is.robot.RobotTask.TaskCase = {
  TASK_NOT_SET: 0,
  POSE: 1,
  PATH: 2,
  TRAJECTORY: 3
};

/**
 * @return {proto.is.robot.RobotTask.TaskCase}
 */
proto.is.robot.RobotTask.prototype.getTaskCase = function() {
  return /** @type {proto.is.robot.RobotTask.TaskCase} */(jspb.Message.computeOneofCase(this, proto.is.robot.RobotTask.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.robot.RobotTask.prototype.toObject = function(opt_includeInstance) {
  return proto.is.robot.RobotTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.robot.RobotTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.RobotTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    pose: (f = msg.getPose()) && proto.is.robot.FinalPoseTask.toObject(includeInstance, f),
    path: (f = msg.getPath()) && proto.is.robot.PathTask.toObject(includeInstance, f),
    trajectory: (f = msg.getTrajectory()) && proto.is.robot.TrajectoryTask.toObject(includeInstance, f),
    allowedError: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    sampling: (f = msg.getSampling()) && common_pb.SamplingSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.robot.RobotTask}
 */
proto.is.robot.RobotTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.robot.RobotTask;
  return proto.is.robot.RobotTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.robot.RobotTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.robot.RobotTask}
 */
proto.is.robot.RobotTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.robot.FinalPoseTask;
      reader.readMessage(value,proto.is.robot.FinalPoseTask.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 2:
      var value = new proto.is.robot.PathTask;
      reader.readMessage(value,proto.is.robot.PathTask.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 3:
      var value = new proto.is.robot.TrajectoryTask;
      reader.readMessage(value,proto.is.robot.TrajectoryTask.deserializeBinaryFromReader);
      msg.setTrajectory(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAllowedError(value);
      break;
    case 15:
      var value = new common_pb.SamplingSettings;
      reader.readMessage(value,common_pb.SamplingSettings.deserializeBinaryFromReader);
      msg.setSampling(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.robot.RobotTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.robot.RobotTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.robot.RobotTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.RobotTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.is.robot.FinalPoseTask.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.is.robot.PathTask.serializeBinaryToWriter
    );
  }
  f = message.getTrajectory();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.is.robot.TrajectoryTask.serializeBinaryToWriter
    );
  }
  f = message.getAllowedError();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getSampling();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      common_pb.SamplingSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional FinalPoseTask pose = 1;
 * @return {?proto.is.robot.FinalPoseTask}
 */
proto.is.robot.RobotTask.prototype.getPose = function() {
  return /** @type{?proto.is.robot.FinalPoseTask} */ (
    jspb.Message.getWrapperField(this, proto.is.robot.FinalPoseTask, 1));
};


/** @param {?proto.is.robot.FinalPoseTask|undefined} value */
proto.is.robot.RobotTask.prototype.setPose = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.is.robot.RobotTask.oneofGroups_[0], value);
};


proto.is.robot.RobotTask.prototype.clearPose = function() {
  this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotTask.prototype.hasPose = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PathTask path = 2;
 * @return {?proto.is.robot.PathTask}
 */
proto.is.robot.RobotTask.prototype.getPath = function() {
  return /** @type{?proto.is.robot.PathTask} */ (
    jspb.Message.getWrapperField(this, proto.is.robot.PathTask, 2));
};


/** @param {?proto.is.robot.PathTask|undefined} value */
proto.is.robot.RobotTask.prototype.setPath = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.is.robot.RobotTask.oneofGroups_[0], value);
};


proto.is.robot.RobotTask.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotTask.prototype.hasPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TrajectoryTask trajectory = 3;
 * @return {?proto.is.robot.TrajectoryTask}
 */
proto.is.robot.RobotTask.prototype.getTrajectory = function() {
  return /** @type{?proto.is.robot.TrajectoryTask} */ (
    jspb.Message.getWrapperField(this, proto.is.robot.TrajectoryTask, 3));
};


/** @param {?proto.is.robot.TrajectoryTask|undefined} value */
proto.is.robot.RobotTask.prototype.setTrajectory = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.is.robot.RobotTask.oneofGroups_[0], value);
};


proto.is.robot.RobotTask.prototype.clearTrajectory = function() {
  this.setTrajectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotTask.prototype.hasTrajectory = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float allowed_error = 14;
 * @return {number}
 */
proto.is.robot.RobotTask.prototype.getAllowedError = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.is.robot.RobotTask.prototype.setAllowedError = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional is.common.SamplingSettings sampling = 15;
 * @return {?proto.is.common.SamplingSettings}
 */
proto.is.robot.RobotTask.prototype.getSampling = function() {
  return /** @type{?proto.is.common.SamplingSettings} */ (
    jspb.Message.getWrapperField(this, common_pb.SamplingSettings, 15));
};


/** @param {?proto.is.common.SamplingSettings|undefined} value */
proto.is.robot.RobotTask.prototype.setSampling = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.is.robot.RobotTask.prototype.clearSampling = function() {
  this.setSampling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotTask.prototype.hasSampling = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.robot.RobotControllerProgress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.robot.RobotControllerProgress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.robot.RobotControllerProgress.displayName = 'proto.is.robot.RobotControllerProgress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.robot.RobotControllerProgress.prototype.toObject = function(opt_includeInstance) {
  return proto.is.robot.RobotControllerProgress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.robot.RobotControllerProgress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.RobotControllerProgress.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentSpeed: (f = msg.getCurrentSpeed()) && common_pb.Speed.toObject(includeInstance, f),
    currentPose: (f = msg.getCurrentPose()) && common_pb.Pose.toObject(includeInstance, f),
    desiredPose: (f = msg.getDesiredPose()) && common_pb.Pose.toObject(includeInstance, f),
    error: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    done: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.robot.RobotControllerProgress}
 */
proto.is.robot.RobotControllerProgress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.robot.RobotControllerProgress;
  return proto.is.robot.RobotControllerProgress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.robot.RobotControllerProgress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.robot.RobotControllerProgress}
 */
proto.is.robot.RobotControllerProgress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Speed;
      reader.readMessage(value,common_pb.Speed.deserializeBinaryFromReader);
      msg.setCurrentSpeed(value);
      break;
    case 2:
      var value = new common_pb.Pose;
      reader.readMessage(value,common_pb.Pose.deserializeBinaryFromReader);
      msg.setCurrentPose(value);
      break;
    case 3:
      var value = new common_pb.Pose;
      reader.readMessage(value,common_pb.Pose.deserializeBinaryFromReader);
      msg.setDesiredPose(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setError(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.robot.RobotControllerProgress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.robot.RobotControllerProgress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.robot.RobotControllerProgress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.robot.RobotControllerProgress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentSpeed();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Speed.serializeBinaryToWriter
    );
  }
  f = message.getCurrentPose();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Pose.serializeBinaryToWriter
    );
  }
  f = message.getDesiredPose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Pose.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getDone();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional is.common.Speed current_speed = 1;
 * @return {?proto.is.common.Speed}
 */
proto.is.robot.RobotControllerProgress.prototype.getCurrentSpeed = function() {
  return /** @type{?proto.is.common.Speed} */ (
    jspb.Message.getWrapperField(this, common_pb.Speed, 1));
};


/** @param {?proto.is.common.Speed|undefined} value */
proto.is.robot.RobotControllerProgress.prototype.setCurrentSpeed = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.robot.RobotControllerProgress.prototype.clearCurrentSpeed = function() {
  this.setCurrentSpeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotControllerProgress.prototype.hasCurrentSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional is.common.Pose current_pose = 2;
 * @return {?proto.is.common.Pose}
 */
proto.is.robot.RobotControllerProgress.prototype.getCurrentPose = function() {
  return /** @type{?proto.is.common.Pose} */ (
    jspb.Message.getWrapperField(this, common_pb.Pose, 2));
};


/** @param {?proto.is.common.Pose|undefined} value */
proto.is.robot.RobotControllerProgress.prototype.setCurrentPose = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.robot.RobotControllerProgress.prototype.clearCurrentPose = function() {
  this.setCurrentPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotControllerProgress.prototype.hasCurrentPose = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional is.common.Pose desired_pose = 3;
 * @return {?proto.is.common.Pose}
 */
proto.is.robot.RobotControllerProgress.prototype.getDesiredPose = function() {
  return /** @type{?proto.is.common.Pose} */ (
    jspb.Message.getWrapperField(this, common_pb.Pose, 3));
};


/** @param {?proto.is.common.Pose|undefined} value */
proto.is.robot.RobotControllerProgress.prototype.setDesiredPose = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.is.robot.RobotControllerProgress.prototype.clearDesiredPose = function() {
  this.setDesiredPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.robot.RobotControllerProgress.prototype.hasDesiredPose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float error = 4;
 * @return {number}
 */
proto.is.robot.RobotControllerProgress.prototype.getError = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.is.robot.RobotControllerProgress.prototype.setError = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool done = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.is.robot.RobotControllerProgress.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.is.robot.RobotControllerProgress.prototype.setDone = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.is.robot);
