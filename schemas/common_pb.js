/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.is.common.BrokerSubscription', null, global);
goog.exportSymbol('proto.is.common.DataType', null, global);
goog.exportSymbol('proto.is.common.FieldSelector', null, global);
goog.exportSymbol('proto.is.common.Orientation', null, global);
goog.exportSymbol('proto.is.common.Pose', null, global);
goog.exportSymbol('proto.is.common.Position', null, global);
goog.exportSymbol('proto.is.common.QueueSettings', null, global);
goog.exportSymbol('proto.is.common.SamplingSettings', null, global);
goog.exportSymbol('proto.is.common.Shape', null, global);
goog.exportSymbol('proto.is.common.Shape.Dimension', null, global);
goog.exportSymbol('proto.is.common.Speed', null, global);
goog.exportSymbol('proto.is.common.Status', null, global);
goog.exportSymbol('proto.is.common.StatusCode', null, global);
goog.exportSymbol('proto.is.common.SyncRequest', null, global);
goog.exportSymbol('proto.is.common.Tensor', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.QueueSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.common.QueueSettings.repeatedFields_, null);
};
goog.inherits(proto.is.common.QueueSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.QueueSettings.displayName = 'proto.is.common.QueueSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.common.QueueSettings.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.QueueSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.QueueSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.QueueSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.QueueSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topicsList: jspb.Message.getRepeatedField(msg, 2),
    prefetchCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exclusive: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.QueueSettings}
 */
proto.is.common.QueueSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.QueueSettings;
  return proto.is.common.QueueSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.QueueSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.QueueSettings}
 */
proto.is.common.QueueSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrefetchCount(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExclusive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.QueueSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.QueueSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.QueueSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.QueueSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPrefetchCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getExclusive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.is.common.QueueSettings.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.is.common.QueueSettings.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string topics = 2;
 * @return {!Array.<string>}
 */
proto.is.common.QueueSettings.prototype.getTopicsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.is.common.QueueSettings.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.is.common.QueueSettings.prototype.addTopics = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.is.common.QueueSettings.prototype.clearTopicsList = function() {
  this.setTopicsList([]);
};


/**
 * optional int32 prefetch_count = 3;
 * @return {number}
 */
proto.is.common.QueueSettings.prototype.getPrefetchCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.is.common.QueueSettings.prototype.setPrefetchCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool exclusive = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.is.common.QueueSettings.prototype.getExclusive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.is.common.QueueSettings.prototype.setExclusive = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.BrokerSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.common.BrokerSubscription.repeatedFields_, null);
};
goog.inherits(proto.is.common.BrokerSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.BrokerSubscription.displayName = 'proto.is.common.BrokerSubscription';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.common.BrokerSubscription.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.BrokerSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.BrokerSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.BrokerSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.BrokerSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    urisList: jspb.Message.getRepeatedField(msg, 1),
    queuesList: jspb.Message.toObjectList(msg.getQueuesList(),
    proto.is.common.QueueSettings.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.BrokerSubscription}
 */
proto.is.common.BrokerSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.BrokerSubscription;
  return proto.is.common.BrokerSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.BrokerSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.BrokerSubscription}
 */
proto.is.common.BrokerSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUris(value);
      break;
    case 2:
      var value = new proto.is.common.QueueSettings;
      reader.readMessage(value,proto.is.common.QueueSettings.deserializeBinaryFromReader);
      msg.addQueues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.BrokerSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.BrokerSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.BrokerSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.BrokerSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrisList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getQueuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.is.common.QueueSettings.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string uris = 1;
 * @return {!Array.<string>}
 */
proto.is.common.BrokerSubscription.prototype.getUrisList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.is.common.BrokerSubscription.prototype.setUrisList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.is.common.BrokerSubscription.prototype.addUris = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.is.common.BrokerSubscription.prototype.clearUrisList = function() {
  this.setUrisList([]);
};


/**
 * repeated QueueSettings queues = 2;
 * @return {!Array.<!proto.is.common.QueueSettings>}
 */
proto.is.common.BrokerSubscription.prototype.getQueuesList = function() {
  return /** @type{!Array.<!proto.is.common.QueueSettings>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.is.common.QueueSettings, 2));
};


/** @param {!Array.<!proto.is.common.QueueSettings>} value */
proto.is.common.BrokerSubscription.prototype.setQueuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.is.common.QueueSettings=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.common.QueueSettings}
 */
proto.is.common.BrokerSubscription.prototype.addQueues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.is.common.QueueSettings, opt_index);
};


proto.is.common.BrokerSubscription.prototype.clearQueuesList = function() {
  this.setQueuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.SamplingSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.is.common.SamplingSettings.oneofGroups_);
};
goog.inherits(proto.is.common.SamplingSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.SamplingSettings.displayName = 'proto.is.common.SamplingSettings';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.is.common.SamplingSettings.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.is.common.SamplingSettings.RateCase = {
  RATE_NOT_SET: 0,
  FREQUENCY: 1,
  PERIOD: 2
};

/**
 * @return {proto.is.common.SamplingSettings.RateCase}
 */
proto.is.common.SamplingSettings.prototype.getRateCase = function() {
  return /** @type {proto.is.common.SamplingSettings.RateCase} */(jspb.Message.computeOneofCase(this, proto.is.common.SamplingSettings.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.SamplingSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.SamplingSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.SamplingSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.SamplingSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    frequency: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    period: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    delay: (f = msg.getDelay()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.SamplingSettings}
 */
proto.is.common.SamplingSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.SamplingSettings;
  return proto.is.common.SamplingSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.SamplingSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.SamplingSettings}
 */
proto.is.common.SamplingSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFrequency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPeriod(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setDelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.SamplingSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.SamplingSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.SamplingSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.SamplingSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDelay();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional float frequency = 1;
 * @return {number}
 */
proto.is.common.SamplingSettings.prototype.getFrequency = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.is.common.SamplingSettings.prototype.setFrequency = function(value) {
  jspb.Message.setOneofField(this, 1, proto.is.common.SamplingSettings.oneofGroups_[0], value);
};


proto.is.common.SamplingSettings.prototype.clearFrequency = function() {
  jspb.Message.setOneofField(this, 1, proto.is.common.SamplingSettings.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.common.SamplingSettings.prototype.hasFrequency = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float period = 2;
 * @return {number}
 */
proto.is.common.SamplingSettings.prototype.getPeriod = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.is.common.SamplingSettings.prototype.setPeriod = function(value) {
  jspb.Message.setOneofField(this, 2, proto.is.common.SamplingSettings.oneofGroups_[0], value);
};


proto.is.common.SamplingSettings.prototype.clearPeriod = function() {
  jspb.Message.setOneofField(this, 2, proto.is.common.SamplingSettings.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.common.SamplingSettings.prototype.hasPeriod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue delay = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.is.common.SamplingSettings.prototype.getDelay = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/** @param {?proto.google.protobuf.FloatValue|undefined} value */
proto.is.common.SamplingSettings.prototype.setDelay = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.is.common.SamplingSettings.prototype.clearDelay = function() {
  this.setDelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.common.SamplingSettings.prototype.hasDelay = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.SyncRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.common.SyncRequest.repeatedFields_, null);
};
goog.inherits(proto.is.common.SyncRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.SyncRequest.displayName = 'proto.is.common.SyncRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.common.SyncRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.SyncRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.SyncRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.SyncRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.SyncRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitiesList: jspb.Message.getRepeatedField(msg, 1),
    sampling: (f = msg.getSampling()) && proto.is.common.SamplingSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.SyncRequest}
 */
proto.is.common.SyncRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.SyncRequest;
  return proto.is.common.SyncRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.SyncRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.SyncRequest}
 */
proto.is.common.SyncRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addEntities(value);
      break;
    case 2:
      var value = new proto.is.common.SamplingSettings;
      reader.readMessage(value,proto.is.common.SamplingSettings.deserializeBinaryFromReader);
      msg.setSampling(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.SyncRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.SyncRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.SyncRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.SyncRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSampling();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.is.common.SamplingSettings.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string entities = 1;
 * @return {!Array.<string>}
 */
proto.is.common.SyncRequest.prototype.getEntitiesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.is.common.SyncRequest.prototype.setEntitiesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.is.common.SyncRequest.prototype.addEntities = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.is.common.SyncRequest.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};


/**
 * optional SamplingSettings sampling = 2;
 * @return {?proto.is.common.SamplingSettings}
 */
proto.is.common.SyncRequest.prototype.getSampling = function() {
  return /** @type{?proto.is.common.SamplingSettings} */ (
    jspb.Message.getWrapperField(this, proto.is.common.SamplingSettings, 2));
};


/** @param {?proto.is.common.SamplingSettings|undefined} value */
proto.is.common.SyncRequest.prototype.setSampling = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.common.SyncRequest.prototype.clearSampling = function() {
  this.setSampling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.common.SyncRequest.prototype.hasSampling = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.FieldSelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.common.FieldSelector.repeatedFields_, null);
};
goog.inherits(proto.is.common.FieldSelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.FieldSelector.displayName = 'proto.is.common.FieldSelector';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.common.FieldSelector.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.FieldSelector.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.FieldSelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.FieldSelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.FieldSelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.FieldSelector}
 */
proto.is.common.FieldSelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.FieldSelector;
  return proto.is.common.FieldSelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.FieldSelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.FieldSelector}
 */
proto.is.common.FieldSelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setFieldsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.FieldSelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.FieldSelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.FieldSelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.FieldSelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 fields = 1;
 * @return {!Array.<number>}
 */
proto.is.common.FieldSelector.prototype.getFieldsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.is.common.FieldSelector.prototype.setFieldsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.is.common.FieldSelector.prototype.addFields = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.is.common.FieldSelector.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.common.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Status.displayName = 'proto.is.common.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    why: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Status}
 */
proto.is.common.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Status;
  return proto.is.common.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Status}
 */
proto.is.common.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.is.common.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWhy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional StatusCode code = 1;
 * @return {!proto.is.common.StatusCode}
 */
proto.is.common.Status.prototype.getCode = function() {
  return /** @type {!proto.is.common.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.is.common.StatusCode} value */
proto.is.common.Status.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string why = 2;
 * @return {string}
 */
proto.is.common.Status.prototype.getWhy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.is.common.Status.prototype.setWhy = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Shape = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.common.Shape.repeatedFields_, null);
};
goog.inherits(proto.is.common.Shape, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Shape.displayName = 'proto.is.common.Shape';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.common.Shape.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Shape.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Shape.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Shape} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Shape.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimsList: jspb.Message.toObjectList(msg.getDimsList(),
    proto.is.common.Shape.Dimension.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Shape}
 */
proto.is.common.Shape.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Shape;
  return proto.is.common.Shape.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Shape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Shape}
 */
proto.is.common.Shape.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.common.Shape.Dimension;
      reader.readMessage(value,proto.is.common.Shape.Dimension.deserializeBinaryFromReader);
      msg.addDims(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Shape.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Shape.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Shape} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Shape.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.is.common.Shape.Dimension.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Shape.Dimension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.common.Shape.Dimension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Shape.Dimension.displayName = 'proto.is.common.Shape.Dimension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Shape.Dimension.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Shape.Dimension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Shape.Dimension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Shape.Dimension.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Shape.Dimension}
 */
proto.is.common.Shape.Dimension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Shape.Dimension;
  return proto.is.common.Shape.Dimension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Shape.Dimension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Shape.Dimension}
 */
proto.is.common.Shape.Dimension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Shape.Dimension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Shape.Dimension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Shape.Dimension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Shape.Dimension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 size = 1;
 * @return {number}
 */
proto.is.common.Shape.Dimension.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.is.common.Shape.Dimension.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.is.common.Shape.Dimension.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.is.common.Shape.Dimension.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Dimension dims = 1;
 * @return {!Array.<!proto.is.common.Shape.Dimension>}
 */
proto.is.common.Shape.prototype.getDimsList = function() {
  return /** @type{!Array.<!proto.is.common.Shape.Dimension>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.is.common.Shape.Dimension, 1));
};


/** @param {!Array.<!proto.is.common.Shape.Dimension>} value */
proto.is.common.Shape.prototype.setDimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.is.common.Shape.Dimension=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.common.Shape.Dimension}
 */
proto.is.common.Shape.prototype.addDims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.is.common.Shape.Dimension, opt_index);
};


proto.is.common.Shape.prototype.clearDimsList = function() {
  this.setDimsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Tensor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.common.Tensor.repeatedFields_, null);
};
goog.inherits(proto.is.common.Tensor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Tensor.displayName = 'proto.is.common.Tensor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.common.Tensor.repeatedFields_ = [3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Tensor.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Tensor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Tensor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Tensor.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.is.common.Shape.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    floatsList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    doublesList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    ints32List: jspb.Message.getRepeatedField(msg, 5),
    ints64List: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Tensor}
 */
proto.is.common.Tensor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Tensor;
  return proto.is.common.Tensor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Tensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Tensor}
 */
proto.is.common.Tensor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.common.Shape;
      reader.readMessage(value,proto.is.common.Shape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 2:
      var value = /** @type {!proto.is.common.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setFloatsList(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDoublesList(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setInts32List(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setInts64List(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Tensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Tensor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Tensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Tensor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.is.common.Shape.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFloatsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getDoublesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
  f = message.getInts32List();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getInts64List();
  if (f.length > 0) {
    writer.writePackedInt64(
      6,
      f
    );
  }
};


/**
 * optional Shape shape = 1;
 * @return {?proto.is.common.Shape}
 */
proto.is.common.Tensor.prototype.getShape = function() {
  return /** @type{?proto.is.common.Shape} */ (
    jspb.Message.getWrapperField(this, proto.is.common.Shape, 1));
};


/** @param {?proto.is.common.Shape|undefined} value */
proto.is.common.Tensor.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.common.Tensor.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.common.Tensor.prototype.hasShape = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataType type = 2;
 * @return {!proto.is.common.DataType}
 */
proto.is.common.Tensor.prototype.getType = function() {
  return /** @type {!proto.is.common.DataType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.is.common.DataType} value */
proto.is.common.Tensor.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated float floats = 3;
 * @return {!Array.<number>}
 */
proto.is.common.Tensor.prototype.getFloatsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array.<number>} value */
proto.is.common.Tensor.prototype.setFloatsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.is.common.Tensor.prototype.addFloats = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.is.common.Tensor.prototype.clearFloatsList = function() {
  this.setFloatsList([]);
};


/**
 * repeated double doubles = 4;
 * @return {!Array.<number>}
 */
proto.is.common.Tensor.prototype.getDoublesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array.<number>} value */
proto.is.common.Tensor.prototype.setDoublesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.is.common.Tensor.prototype.addDoubles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.is.common.Tensor.prototype.clearDoublesList = function() {
  this.setDoublesList([]);
};


/**
 * repeated int32 ints32 = 5;
 * @return {!Array.<number>}
 */
proto.is.common.Tensor.prototype.getInts32List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.is.common.Tensor.prototype.setInts32List = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.is.common.Tensor.prototype.addInts32 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.is.common.Tensor.prototype.clearInts32List = function() {
  this.setInts32List([]);
};


/**
 * repeated int64 ints64 = 6;
 * @return {!Array.<number>}
 */
proto.is.common.Tensor.prototype.getInts64List = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.is.common.Tensor.prototype.setInts64List = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.is.common.Tensor.prototype.addInts64 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.is.common.Tensor.prototype.clearInts64List = function() {
  this.setInts64List([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.common.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Position.displayName = 'proto.is.common.Position';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Position}
 */
proto.is.common.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Position;
  return proto.is.common.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Position}
 */
proto.is.common.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.is.common.Position.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.is.common.Position.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.is.common.Position.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.is.common.Position.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.is.common.Position.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.is.common.Position.prototype.setZ = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Orientation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.common.Orientation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Orientation.displayName = 'proto.is.common.Orientation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Orientation.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Orientation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Orientation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Orientation.toObject = function(includeInstance, msg) {
  var f, obj = {
    yaw: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    pitch: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    roll: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Orientation}
 */
proto.is.common.Orientation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Orientation;
  return proto.is.common.Orientation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Orientation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Orientation}
 */
proto.is.common.Orientation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYaw(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Orientation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Orientation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Orientation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Orientation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRoll();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float yaw = 1;
 * @return {number}
 */
proto.is.common.Orientation.prototype.getYaw = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.is.common.Orientation.prototype.setYaw = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float pitch = 2;
 * @return {number}
 */
proto.is.common.Orientation.prototype.getPitch = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.is.common.Orientation.prototype.setPitch = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float roll = 3;
 * @return {number}
 */
proto.is.common.Orientation.prototype.getRoll = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.is.common.Orientation.prototype.setRoll = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Pose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.common.Pose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Pose.displayName = 'proto.is.common.Pose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Pose.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Pose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Pose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Pose.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.is.common.Position.toObject(includeInstance, f),
    orientation: (f = msg.getOrientation()) && proto.is.common.Orientation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Pose}
 */
proto.is.common.Pose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Pose;
  return proto.is.common.Pose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Pose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Pose}
 */
proto.is.common.Pose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.common.Position;
      reader.readMessage(value,proto.is.common.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.is.common.Orientation;
      reader.readMessage(value,proto.is.common.Orientation.deserializeBinaryFromReader);
      msg.setOrientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Pose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Pose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Pose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Pose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.is.common.Position.serializeBinaryToWriter
    );
  }
  f = message.getOrientation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.is.common.Orientation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Position position = 1;
 * @return {?proto.is.common.Position}
 */
proto.is.common.Pose.prototype.getPosition = function() {
  return /** @type{?proto.is.common.Position} */ (
    jspb.Message.getWrapperField(this, proto.is.common.Position, 1));
};


/** @param {?proto.is.common.Position|undefined} value */
proto.is.common.Pose.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.common.Pose.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.common.Pose.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Orientation orientation = 2;
 * @return {?proto.is.common.Orientation}
 */
proto.is.common.Pose.prototype.getOrientation = function() {
  return /** @type{?proto.is.common.Orientation} */ (
    jspb.Message.getWrapperField(this, proto.is.common.Orientation, 2));
};


/** @param {?proto.is.common.Orientation|undefined} value */
proto.is.common.Pose.prototype.setOrientation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.common.Pose.prototype.clearOrientation = function() {
  this.setOrientation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.common.Pose.prototype.hasOrientation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.common.Speed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.common.Speed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.common.Speed.displayName = 'proto.is.common.Speed';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.common.Speed.prototype.toObject = function(opt_includeInstance) {
  return proto.is.common.Speed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.common.Speed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Speed.toObject = function(includeInstance, msg) {
  var f, obj = {
    linear: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    angular: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.common.Speed}
 */
proto.is.common.Speed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.common.Speed;
  return proto.is.common.Speed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.common.Speed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.common.Speed}
 */
proto.is.common.Speed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLinear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngular(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.common.Speed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.common.Speed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.common.Speed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.common.Speed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinear();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getAngular();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float linear = 1;
 * @return {number}
 */
proto.is.common.Speed.prototype.getLinear = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.is.common.Speed.prototype.setLinear = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float angular = 2;
 * @return {number}
 */
proto.is.common.Speed.prototype.getAngular = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.is.common.Speed.prototype.setAngular = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.is.common.StatusCode = {
  UNKNOWN: 0,
  OK: 1,
  CANCELLED: 2,
  INVALID_ARGUMENT: 3,
  DEADLINE_EXCEEDED: 4,
  NOT_FOUND: 5,
  ALREADY_EXISTS: 6,
  PERMISSION_DENIED: 7,
  UNAUTHENTICATED: 8,
  FAILED_PRECONDITION: 9,
  OUT_OF_RANGE: 10,
  UNIMPLEMENTED: 11,
  INTERNAL_ERROR: 12
};

/**
 * @enum {number}
 */
proto.is.common.DataType = {
  UNKNOWN_TYPE: 0,
  FLOAT_TYPE: 1,
  DOUBLE_TYPE: 2,
  INT32_TYPE: 3,
  INT64_TYPE: 4
};

goog.object.extend(exports, proto.is.common);
