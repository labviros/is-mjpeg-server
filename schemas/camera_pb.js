/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var image_pb = require('./image_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.is.vision.CameraCalibration', null, global);
goog.exportSymbol('proto.is.vision.CameraConfig', null, global);
goog.exportSymbol('proto.is.vision.CameraConfigFields', null, global);
goog.exportSymbol('proto.is.vision.CameraSetting', null, global);
goog.exportSymbol('proto.is.vision.CameraSettings', null, global);
goog.exportSymbol('proto.is.vision.FrameTransformation', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.CameraSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.CameraSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.CameraSetting.displayName = 'proto.is.vision.CameraSetting';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.CameraSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.CameraSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.CameraSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    automatic: jspb.Message.getFieldWithDefault(msg, 1, false),
    ratio: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.CameraSetting;
  return proto.is.vision.CameraSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.CameraSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutomatic(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.CameraSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.CameraSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.CameraSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutomatic();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional bool automatic = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.is.vision.CameraSetting.prototype.getAutomatic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.is.vision.CameraSetting.prototype.setAutomatic = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float ratio = 2;
 * @return {number}
 */
proto.is.vision.CameraSetting.prototype.getRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.is.vision.CameraSetting.prototype.setRatio = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.CameraSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.CameraSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.CameraSettings.displayName = 'proto.is.vision.CameraSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.CameraSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.CameraSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.CameraSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    brightness: (f = msg.getBrightness()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    exposure: (f = msg.getExposure()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    focus: (f = msg.getFocus()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    gain: (f = msg.getGain()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    gamma: (f = msg.getGamma()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    hue: (f = msg.getHue()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    iris: (f = msg.getIris()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    saturation: (f = msg.getSaturation()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    sharpness: (f = msg.getSharpness()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    shutter: (f = msg.getShutter()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    whiteBalanceBu: (f = msg.getWhiteBalanceBu()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    whiteBalanceRv: (f = msg.getWhiteBalanceRv()) && proto.is.vision.CameraSetting.toObject(includeInstance, f),
    zoom: (f = msg.getZoom()) && proto.is.vision.CameraSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.CameraSettings}
 */
proto.is.vision.CameraSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.CameraSettings;
  return proto.is.vision.CameraSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.CameraSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.CameraSettings}
 */
proto.is.vision.CameraSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setBrightness(value);
      break;
    case 2:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setExposure(value);
      break;
    case 3:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setFocus(value);
      break;
    case 4:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setGain(value);
      break;
    case 5:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setGamma(value);
      break;
    case 6:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setHue(value);
      break;
    case 7:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setIris(value);
      break;
    case 8:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setSaturation(value);
      break;
    case 9:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setSharpness(value);
      break;
    case 10:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setShutter(value);
      break;
    case 11:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setWhiteBalanceBu(value);
      break;
    case 12:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setWhiteBalanceRv(value);
      break;
    case 13:
      var value = new proto.is.vision.CameraSetting;
      reader.readMessage(value,proto.is.vision.CameraSetting.deserializeBinaryFromReader);
      msg.setZoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.CameraSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.CameraSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.CameraSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrightness();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getExposure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getFocus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getGain();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getGamma();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getHue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getIris();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getSaturation();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getSharpness();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getShutter();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getWhiteBalanceBu();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getWhiteBalanceRv();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
  f = message.getZoom();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.is.vision.CameraSetting.serializeBinaryToWriter
    );
  }
};


/**
 * optional CameraSetting brightness = 1;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getBrightness = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 1));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setBrightness = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.vision.CameraSettings.prototype.clearBrightness = function() {
  this.setBrightness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasBrightness = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CameraSetting exposure = 2;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getExposure = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 2));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setExposure = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.vision.CameraSettings.prototype.clearExposure = function() {
  this.setExposure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasExposure = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CameraSetting focus = 3;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getFocus = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 3));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setFocus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.is.vision.CameraSettings.prototype.clearFocus = function() {
  this.setFocus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasFocus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CameraSetting gain = 4;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getGain = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 4));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setGain = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.is.vision.CameraSettings.prototype.clearGain = function() {
  this.setGain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasGain = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CameraSetting gamma = 5;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getGamma = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 5));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setGamma = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.is.vision.CameraSettings.prototype.clearGamma = function() {
  this.setGamma(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasGamma = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CameraSetting hue = 6;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getHue = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 6));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setHue = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.is.vision.CameraSettings.prototype.clearHue = function() {
  this.setHue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasHue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CameraSetting iris = 7;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getIris = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 7));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setIris = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.is.vision.CameraSettings.prototype.clearIris = function() {
  this.setIris(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasIris = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CameraSetting saturation = 8;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getSaturation = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 8));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setSaturation = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.is.vision.CameraSettings.prototype.clearSaturation = function() {
  this.setSaturation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasSaturation = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CameraSetting sharpness = 9;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getSharpness = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 9));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setSharpness = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.is.vision.CameraSettings.prototype.clearSharpness = function() {
  this.setSharpness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasSharpness = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CameraSetting shutter = 10;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getShutter = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 10));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setShutter = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.is.vision.CameraSettings.prototype.clearShutter = function() {
  this.setShutter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasShutter = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CameraSetting white_balance_bu = 11;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getWhiteBalanceBu = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 11));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setWhiteBalanceBu = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.is.vision.CameraSettings.prototype.clearWhiteBalanceBu = function() {
  this.setWhiteBalanceBu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasWhiteBalanceBu = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CameraSetting white_balance_rv = 12;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getWhiteBalanceRv = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 12));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setWhiteBalanceRv = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.is.vision.CameraSettings.prototype.clearWhiteBalanceRv = function() {
  this.setWhiteBalanceRv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasWhiteBalanceRv = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CameraSetting zoom = 13;
 * @return {?proto.is.vision.CameraSetting}
 */
proto.is.vision.CameraSettings.prototype.getZoom = function() {
  return /** @type{?proto.is.vision.CameraSetting} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSetting, 13));
};


/** @param {?proto.is.vision.CameraSetting|undefined} value */
proto.is.vision.CameraSettings.prototype.setZoom = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.is.vision.CameraSettings.prototype.clearZoom = function() {
  this.setZoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraSettings.prototype.hasZoom = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.CameraConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.CameraConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.CameraConfig.displayName = 'proto.is.vision.CameraConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.CameraConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.CameraConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.CameraConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampling: (f = msg.getSampling()) && common_pb.SamplingSettings.toObject(includeInstance, f),
    image: (f = msg.getImage()) && image_pb.ImageSettings.toObject(includeInstance, f),
    camera: (f = msg.getCamera()) && proto.is.vision.CameraSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.CameraConfig}
 */
proto.is.vision.CameraConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.CameraConfig;
  return proto.is.vision.CameraConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.CameraConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.CameraConfig}
 */
proto.is.vision.CameraConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.SamplingSettings;
      reader.readMessage(value,common_pb.SamplingSettings.deserializeBinaryFromReader);
      msg.setSampling(value);
      break;
    case 2:
      var value = new image_pb.ImageSettings;
      reader.readMessage(value,image_pb.ImageSettings.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 3:
      var value = new proto.is.vision.CameraSettings;
      reader.readMessage(value,proto.is.vision.CameraSettings.deserializeBinaryFromReader);
      msg.setCamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.CameraConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.CameraConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.CameraConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampling();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.SamplingSettings.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      image_pb.ImageSettings.serializeBinaryToWriter
    );
  }
  f = message.getCamera();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.is.vision.CameraSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional is.common.SamplingSettings sampling = 1;
 * @return {?proto.is.common.SamplingSettings}
 */
proto.is.vision.CameraConfig.prototype.getSampling = function() {
  return /** @type{?proto.is.common.SamplingSettings} */ (
    jspb.Message.getWrapperField(this, common_pb.SamplingSettings, 1));
};


/** @param {?proto.is.common.SamplingSettings|undefined} value */
proto.is.vision.CameraConfig.prototype.setSampling = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.is.vision.CameraConfig.prototype.clearSampling = function() {
  this.setSampling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraConfig.prototype.hasSampling = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageSettings image = 2;
 * @return {?proto.is.vision.ImageSettings}
 */
proto.is.vision.CameraConfig.prototype.getImage = function() {
  return /** @type{?proto.is.vision.ImageSettings} */ (
    jspb.Message.getWrapperField(this, image_pb.ImageSettings, 2));
};


/** @param {?proto.is.vision.ImageSettings|undefined} value */
proto.is.vision.CameraConfig.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.vision.CameraConfig.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraConfig.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CameraSettings camera = 3;
 * @return {?proto.is.vision.CameraSettings}
 */
proto.is.vision.CameraConfig.prototype.getCamera = function() {
  return /** @type{?proto.is.vision.CameraSettings} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.CameraSettings, 3));
};


/** @param {?proto.is.vision.CameraSettings|undefined} value */
proto.is.vision.CameraConfig.prototype.setCamera = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.is.vision.CameraConfig.prototype.clearCamera = function() {
  this.setCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraConfig.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.CameraCalibration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.CameraCalibration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.CameraCalibration.displayName = 'proto.is.vision.CameraCalibration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.CameraCalibration.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.CameraCalibration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.CameraCalibration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraCalibration.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    calibratedAt: (f = msg.getCalibratedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    error: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    resolution: (f = msg.getResolution()) && image_pb.Resolution.toObject(includeInstance, f),
    intrinsic: (f = msg.getIntrinsic()) && common_pb.Tensor.toObject(includeInstance, f),
    distortion: (f = msg.getDistortion()) && common_pb.Tensor.toObject(includeInstance, f),
    extrinsic: (f = msg.getExtrinsic()) && proto.is.vision.FrameTransformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.CameraCalibration}
 */
proto.is.vision.CameraCalibration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.CameraCalibration;
  return proto.is.vision.CameraCalibration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.CameraCalibration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.CameraCalibration}
 */
proto.is.vision.CameraCalibration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCalibratedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setError(value);
      break;
    case 4:
      var value = new image_pb.Resolution;
      reader.readMessage(value,image_pb.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 5:
      var value = new common_pb.Tensor;
      reader.readMessage(value,common_pb.Tensor.deserializeBinaryFromReader);
      msg.setIntrinsic(value);
      break;
    case 6:
      var value = new common_pb.Tensor;
      reader.readMessage(value,common_pb.Tensor.deserializeBinaryFromReader);
      msg.setDistortion(value);
      break;
    case 7:
      var value = new proto.is.vision.FrameTransformation;
      reader.readMessage(value,proto.is.vision.FrameTransformation.deserializeBinaryFromReader);
      msg.setExtrinsic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.CameraCalibration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.CameraCalibration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.CameraCalibration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.CameraCalibration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCalibratedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      image_pb.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getIntrinsic();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Tensor.serializeBinaryToWriter
    );
  }
  f = message.getDistortion();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.Tensor.serializeBinaryToWriter
    );
  }
  f = message.getExtrinsic();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.is.vision.FrameTransformation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.is.vision.CameraCalibration.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.is.vision.CameraCalibration.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp calibrated_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.is.vision.CameraCalibration.prototype.getCalibratedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.is.vision.CameraCalibration.prototype.setCalibratedAt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.is.vision.CameraCalibration.prototype.clearCalibratedAt = function() {
  this.setCalibratedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraCalibration.prototype.hasCalibratedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double error = 3;
 * @return {number}
 */
proto.is.vision.CameraCalibration.prototype.getError = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.is.vision.CameraCalibration.prototype.setError = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional Resolution resolution = 4;
 * @return {?proto.is.vision.Resolution}
 */
proto.is.vision.CameraCalibration.prototype.getResolution = function() {
  return /** @type{?proto.is.vision.Resolution} */ (
    jspb.Message.getWrapperField(this, image_pb.Resolution, 4));
};


/** @param {?proto.is.vision.Resolution|undefined} value */
proto.is.vision.CameraCalibration.prototype.setResolution = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.is.vision.CameraCalibration.prototype.clearResolution = function() {
  this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraCalibration.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional is.common.Tensor intrinsic = 5;
 * @return {?proto.is.common.Tensor}
 */
proto.is.vision.CameraCalibration.prototype.getIntrinsic = function() {
  return /** @type{?proto.is.common.Tensor} */ (
    jspb.Message.getWrapperField(this, common_pb.Tensor, 5));
};


/** @param {?proto.is.common.Tensor|undefined} value */
proto.is.vision.CameraCalibration.prototype.setIntrinsic = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.is.vision.CameraCalibration.prototype.clearIntrinsic = function() {
  this.setIntrinsic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraCalibration.prototype.hasIntrinsic = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional is.common.Tensor distortion = 6;
 * @return {?proto.is.common.Tensor}
 */
proto.is.vision.CameraCalibration.prototype.getDistortion = function() {
  return /** @type{?proto.is.common.Tensor} */ (
    jspb.Message.getWrapperField(this, common_pb.Tensor, 6));
};


/** @param {?proto.is.common.Tensor|undefined} value */
proto.is.vision.CameraCalibration.prototype.setDistortion = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.is.vision.CameraCalibration.prototype.clearDistortion = function() {
  this.setDistortion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraCalibration.prototype.hasDistortion = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FrameTransformation extrinsic = 7;
 * @return {?proto.is.vision.FrameTransformation}
 */
proto.is.vision.CameraCalibration.prototype.getExtrinsic = function() {
  return /** @type{?proto.is.vision.FrameTransformation} */ (
    jspb.Message.getWrapperField(this, proto.is.vision.FrameTransformation, 7));
};


/** @param {?proto.is.vision.FrameTransformation|undefined} value */
proto.is.vision.CameraCalibration.prototype.setExtrinsic = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.is.vision.CameraCalibration.prototype.clearExtrinsic = function() {
  this.setExtrinsic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.CameraCalibration.prototype.hasExtrinsic = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.vision.FrameTransformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.vision.FrameTransformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.is.vision.FrameTransformation.displayName = 'proto.is.vision.FrameTransformation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.vision.FrameTransformation.prototype.toObject = function(opt_includeInstance) {
  return proto.is.vision.FrameTransformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.vision.FrameTransformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.FrameTransformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tf: (f = msg.getTf()) && common_pb.Tensor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.vision.FrameTransformation}
 */
proto.is.vision.FrameTransformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.vision.FrameTransformation;
  return proto.is.vision.FrameTransformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.vision.FrameTransformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.vision.FrameTransformation}
 */
proto.is.vision.FrameTransformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = new common_pb.Tensor;
      reader.readMessage(value,common_pb.Tensor.deserializeBinaryFromReader);
      msg.setTf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.vision.FrameTransformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.vision.FrameTransformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.vision.FrameTransformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.vision.FrameTransformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTf();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Tensor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.is.vision.FrameTransformation.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.is.vision.FrameTransformation.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.is.vision.FrameTransformation.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.is.vision.FrameTransformation.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional is.common.Tensor tf = 3;
 * @return {?proto.is.common.Tensor}
 */
proto.is.vision.FrameTransformation.prototype.getTf = function() {
  return /** @type{?proto.is.common.Tensor} */ (
    jspb.Message.getWrapperField(this, common_pb.Tensor, 3));
};


/** @param {?proto.is.common.Tensor|undefined} value */
proto.is.vision.FrameTransformation.prototype.setTf = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.is.vision.FrameTransformation.prototype.clearTf = function() {
  this.setTf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.is.vision.FrameTransformation.prototype.hasTf = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.is.vision.CameraConfigFields = {
  ALL: 0,
  SAMPLING_SETTINGS: 1,
  IMAGE_SETTINGS: 2,
  CAMERA_SETTINGS: 3
};

goog.object.extend(exports, proto.is.vision);
